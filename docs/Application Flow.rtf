{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww13820\viewh9160\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \
\
APHID DOCUMENTATION\
=====================\
\
Main Application Flow\
--------------------------\
\
Aphid's main application flow is built around the Request object. The object contains all the information passed to the server from the client. The request is authenticated, data is gathered, and a response is sent back to the client.\
\
A1. Create Request Object									(request.php)\
	a) store a new Session - see S1 below\
	b) set the desired output format\
	c) get the CRUD action we're performing\
	d) set the database table we're requesting\
	e) throw to specific CRUD method\
\
A2. Authenticate the Request								(authentication.php)\
	a) get the permission code for the table we're requesting\
	b) get the user's authentication level via their sess_id value in the database - see S2 below\
	c) update the user's sess_id value - see S2 below\
	d) set the request's allowed actions\
\
A3. Gather the Requested Data								(controller.php)\
	a) check to see if the requested action is allowed\
	b) protect against CSRF if we're altering data in any way\
	c) query the database\
	d) get template file (IF output format is html)\
		i) check if we're allowed to see the template\
		ii) get the template file name\
	e) set a new CSRF token\
\
A4. Send the Requested Data to the Client						(response.php)\
	a) IF output format is json, encode and echo the requested data\
	b) IF output format is html\'85\
		i) get the template file path from the current theme or fallback to a default path\
		ii) include the file in the output buffer\
		iii) echo the buffer\
\
Session Flow\
------------------\
\
Sessions in Aphid do use PHP's default session implementation - this may change in a future version, but for now native behavior is perfectly sufficient for Aphid's needs. Typically the only information stored in the session is a CSRF token and a boolean value indicating whether the request is made by a recognized user.\
\
When a user logs in, the current session id is recorded in their database entry - this session id is used to identify the user on future pages (and is regenerated / updated each time the user makes a request).\
\
S1. Open the Session									(session.php)\
	a) start the session\
	b) store the session id - this is the id used in the previous request and is called $last_id\
	c) regenerate the session's id to make session spoofing harder\
	d) store the new session id - this is the id to be used in this request and is called $id\
\
S2. Use Session to Authenticate Users							(authentication.php)\
	a) use $last_id to get the user's authentication level\
	b) compare user authentication level against the table's required permission level\
	c) update the user's sess_id - after this point, use $id to get user data\
\
Errors\
--------\
\
The Controller's $results property contains an array of data generated by the requested query. It may also contain an element called 'error' which holds an array of error codes. These codes may (or may not) be dealt with in template files (if output format is html) or by javascript (if output format is json).\
\
Alternately, there are cases in which errors are so severe that the script cannot continue OR (due to configuration or lack of permissions) in which further action cannot be allowed. In this case a complete error page is generated and the script is exited. The request object is available to the error page template in order to inform the user about the error (with the exception of the 500 error page, which is generally reserved for displaying exceptions).\
\
(Note that while these codes are certainly based on HTTP status codes, they don't correspond one-to-one\'85 it's just a convenient and, yes, cool way to identify errors.)\
\
E1. 404 - Data Not Found\
	a) if no data is returned, a code of 404 is added to $results['error']\
	b) if no view is found, a 404 error page is generated\
\
E2. 403 - Forbidden\
	a) if the requested action (i.e. reading or writing) is not allowed for this user, a code of 403 is added to $results['error']\
	b) if the requested view is not allowed for this user AND we don't allow a redirection to login, a 403 error page is generated\
\
E3. 401 - Unauthorized (these errors generally indicate malicious activity)\
	a) if a CSRF attack is detected, a 401 error page is generated\
	b) if the session's $last_id doesn't match a user in the database, a 401 error page is generated\
\
E3. 500 - Server Error\
	a) if there is an uncaught Exception, a 500 error page is generated.\
 \
}