APHID Relationships
===================

One-to-Many
-----------

Directionality matters in these relationships - the SQL template will change slightly
depending on whether we're selecting from the "one" table or the "many" table.

SQL string template for One-to-Many

SELECT [FIELDS] FROM [TABLE]
JOIN [FOREIGN] ON (TABLE.id = FOREIGN.table_id)
WHERE FOREIGN.field = value;

SQL string template for Many-to-One

SELECT [FIELDS] FROM [TABLE]
JOIN [FOREIGN] ON (TABLE.foreign_id = FOREIGN.id)
WHERE FOREIGN.field = value;

Many-to-Many
------------

SQL string template for Many-to-Many

Directionality doesn't matter here, but we do have to make sure to create the reference
table by alphabetically ordering the selection table and foreign table.

SELECT [FIELDS] FROM [TABLE] 
JOIN [REF_TABLE] ON (TABLE.id = REF_TABLE.table_id)
JOIN [FOREIGN] ON (FOREIGN.id = REF_TABLE.foreign_id)
WHERE FOREIGN.field = value;

SELECT [FIELDS] FROM [TABLE] JOIN [REF] ON [REF_TABLE] JOIN [FOREIGN] ON [REF_FOREIGN] WHERE [WHERE];



#################
## Creating New Relationships
###################

Data required:

$ThisDataType, $RelatedType, $RelationshipType (one-to-many OR many-to-many)

-------

Ex. $RelationshipType == one-to-many
(NOTE: the order matters - each object of ThisDataType can have many objects of RelatedType, but NOT the other way around.)

ALTER TABLE $RelatedType ADD FIELD $ThisDataType-id INT(11);

-------

Ex. $RelationshipType == many-to-many

$RefTable = $ThisDataType_$RelatedType (sorted alphabetically)

CREATE TABLE $RefTable (
	$ThisDataType-id INT(11),
	$RelatedType-id INT(11)
);


