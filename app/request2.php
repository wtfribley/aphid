<?php defined("PRIVATE") or die("Permission Denied. Cannot Access Directly.");

class Request {

	/**
	 *	The CRUD action (i.e. 'verb' or 'method') of the request.
	 */
	public $action;

	/**
	 *	Format in which to send a response - defaults to HTML.
	 *    note: available to the entire application.
	 */
	public static $format = 'html';

	/**
	 *	Options, used to contruct an instance of Model.
	 *		(these are gathered from the uri and request body.)
	 */
	public $options = array();

	/**
	 *	Holds the Response object generated by this request.
	 */
	public $response;

	
	private $crud_map = array(
        'POST' => 'create',
        'GET' => 'read',
        'PUT' => 'update',
        'DELETE' => 'delete'
    );
	
	
	public function __construct($uri = null, $request_method = null, $request_body = null) {

		//-----------------------------
		//	Determine Response Format
		//-----------------------------

		// (from Accept header - superceded by anything determined from the URI, see below)

		if (isset($_SERVER['HTTP_ACCEPT']) && strpos($_SERVER['HTTP_ACCEPT'], 'json')) static::$format = 'json';

		//---------------
		//	Parse URL
		//---------------

		// get the uri from the request header.
		if (is_null($uri)) {
			if (isset($_SERVER['REQUEST_URI'])) $uri = $_SERVER['REQUEST_URI'];
			else throw new Exception('Request could not determine the URI - the REQUEST_URI header must be set.');
		}

		// remove the base uri in case we've installed in a subdirectory.
		$base_uri = Config::get('system.base_uri','/');
		$pattern = '/^(' . preg_quote($base_uri,'/') . ')/';
		$uri = preg_replace($pattern, '', $_SERVER['REQUEST_URI']);

		// break up the uri in segments.
		$uri = explode('/', $uri);

		//-----------------------------
		//	Determine Response Format
		//-----------------------------

		// (from URI - this supercedes the Accept header)

		if ($uri[0] == 'api') {
			static::$format = 'json';

			// remove the unnecessary api segment.
			array_shift($uri);
		}
		else if ($base_uri == '/api/') {
			static::$format = 'json';
		}
		else if (substr(end($uri), -5) == '.json') {
			static::$format = 'json';

			// remove the .json extension.
			$last_segment = array_pop($uri);
			$uri[] = substr($last_segment, 0, -5);
		}
		else if (substr(end($uri), -5) == '.html') {
			static::$format = 'html';

			// remove the .html extension.
			$last_segment = array_pop($uri);
			$uri[] = substr($last_segment, 0, -5);
		}

		//-----------------------------
		//	Gather Options from URI
		//-----------------------------

		// this handles the 'home' page - defaults to the model named 'index.'
		if ($uri[0] === '') $uri[0] = Config::get('system.index_model', 'index');

		$options['model'] = $uri[0];

		if (isset($uri[1]) && $uri[1] != 'all') $options['where'] = $uri[1];

		if (isset($uri[2])) $options['fields'] = $uri[2];

		//----------------------------
		//	Determine Request Method
		//----------------------------

		if (is_null($request_method)) $request_method = $this->crud_map[$_SERVER['REQUEST_METHOD']];

		$this->action = $request_method;

		//----------------------
		//	Parse Request Body
		//----------------------

		if (is_null($request_body)) $request_body = @file_get_contents('php://input');

		// POST (i.e. create) requests can simply pass a hash of {field:value,field:value}
		//	so this checks for that and creats the required 'data' option.
		if ($this->action == 'create' && ! isset($request_body['data'])) {
			$options['data'] = $request_body;
		}
		// DELETE requests can simply pass a valid 'where' option.
		else if ($this->action == 'delete' && $request_body != '' && 
			( ! isset($request_body['where']) || ! isset($request_body['id']) || ! isset($request_body['name']))) {

			$options['where'] = $request_body;
		}
		// otherwise this is just pass-through.
		else {
			$options = array_merge($options, $request_body);
		}

		//------------------------------
		//	Instantiate the Controller
		//------------------------------

		$controller = new Controller($this->action, static::$format, $this->options);
		$this->response = $controller->response;

		unset($controller);
	}
}